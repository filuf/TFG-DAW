services:

  # 1. Base de datos MySQL (debe arrancar primero)
  database:
    container_name: mysql-database
    build: 
      context: ./database/
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - internal
    # Esencial: todos los servicios dependen de la base de datos

  # 2. Backend autenticación JWT Spring Boot (depende de la base de datos)
  spring-authentication:
    container_name: spring-authentication
    build: 
      context: ./backend/authentication-service/
    ports:
      - "8080:8080"
    networks:
      - nginx
      - internal
    # Importante: debe arrancar tras la base de datos para gestionar la autenticación

  # 3. Backend aplicación cafetería pedidos en tiempo real (NestJS, independiente)
  nest-websocket:
    container_name: nest-websocket
    build: 
      context: ./backend/websocket-service/
    ports:
      - "3000:3000"
    networks:
      - internal
      - coffee-shop
    # Servicio de WebSocket para pedidos en tiempo real en la cafetería

  # 4. Backend pedidos, productos y carrito Spring Boot (depende de autenticación y base de datos)
  spring-order:
    container_name: spring-order
    build: 
      context: ./backend/pedidos-service/
    ports:
      - "8081:8081"
    networks:
      - nginx
      - internal
    # Gestiona pedidos, productos y carrito. Arrancar tras autenticación

  # 5. Backend envío de correos Spring Boot (depende de base de datos, puede ir tras pedidos)
  spring-mailer:
    container_name: spring-mailer
    build: 
      context: ./backend/mail-service/
    ports:
      - "8082:8082"
    networks:
      - internal
    # Servicio para envío de correos (confirmaciones, notificaciones)

  # 6. Proxy inverso nginx (centraliza el acceso HTTP/HTTPS)
  nginx:
    container_name: nginx-proxy
    build: 
      context: ./reverse-proxy/
    ports:
      - "80:80"
      - "443:443"
    networks:
      - nginx
    # Redirecciona el tráfico a los servicios backend y frontend

  # 7. Frontend web principal (Astro, visible para usuarios finales)
  web-astro:
    container_name: astro-web
    build: 
      context: ./frontend/cafeteria-app/
    ports:
      - "4321:4321"
    networks:
      - nginx
    # Web pública para clientes (catálogo, pedidos, login, etc.)

  # 8. Frontend aplicación cafetería pedidos en tiempo real (React, para personal)
  app-cafeteria:
    container_name: react-web
    build: 
      context: ./frontend/web-pedidos/
    ports:
      - "3001:3001"
    networks:
      - nginx
      - coffee-shop
    # Interfaz interna para el personal de la cafetería
    
volumes:
  mysql-data:

networks:
  nginx:
    driver: bridge
  internal:
  coffee-shop:
    